#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0
#  in conjunction with Tcl version 8.6
#    Dec 27, 2020 01:05:03 PM +07  platform: Windows NT

import sys
from distutils import command
from tkinter import filedialog

import nltk

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Key_term_extract_application_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    Key_term_extract_application_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    Key_term_extract_application_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:

    def open_file(self):
        input = filedialog.askopenfile(initialdir="/", title="Select text file.", filetypes=[('txt text', 'txt')])
        self.TEntry1.delete(0, tk.END)
        self.TEntry1.insert(0, input.name)

        data = open(input.name, 'r')
        text = data.read()
        #Ex. A
        nouns = []
        verbs = []
        adjs = []

        sentences = nltk.sent_tokenize(text)
        output_file = open("Output.txt", "a")

        for sentence in sentences:
            tokens = nltk.word_tokenize(sentence)
            tags = nltk.pos_tag(tokens)

        for word, pos in tags:
            if pos in ['VB', 'VBD', 'VBG', 'VBP', 'VBN', 'VBZ']:
                verbs.append(word)
            elif  pos in ['NN', 'NNS', 'NNP', 'NNPS']:
                nouns.append(word)
            elif  pos in ['JJ', 'JJR', 'JJS']:
                adjs.append(word)

        output_file.write("Nouns: ")
        self.Scrolledtext1.insert(tk.INSERT,'Nouns: \n')
        for noun in nouns:
            output_file.write(noun + " ")
            self.Scrolledtext1.insert(tk.INSERT,noun + ' ')

        output_file.write("\nVerbs: ")
        self.Scrolledtext1.insert(tk.INSERT, '\n\nVerbs: \n')
        for verb in verbs:
            output_file.write(verb + " ")
            self.Scrolledtext1.insert(tk.INSERT, verb + ' ')

        output_file.write("\nAdjectives: ")
        self.Scrolledtext1.insert(tk.INSERT, '\n\nAdjectives: \n')
        for adj in adjs:
            output_file.write(adj + " ")
            self.Scrolledtext1.insert(tk.INSERT, adj + ' ')

        # Ex. B
        compound_nount = open('Output.txt', 'a')
        compound_nount.write('\n\nAdjective noun pair:\n')
        self.Scrolledtext1.insert(tk.INSERT, '\n\nAdjective noun pair:\n')
        sentences = nltk.sent_tokenize(text)
        grammar = """
                        P:  {<DT?><JJ|JJR|JJS>*<NN|NNP|NNS|NNPS[1]>}
                          """
        PCHunker = nltk.RegexpParser(grammar)
        for sentence in sentences:
            tokens = nltk.word_tokenize(sentence)
            tags = nltk.pos_tag(tokens)
            result = PCHunker.parse(tags)
            # result.draw()
            for a in result:
                if isinstance(a, nltk.tree.Tree):
                    if a.label() == "P":
                        # print(" ".join([lf[0] for lf in a.leaves()]))
                        compound_nount.write(" ".join([lf[0] for lf in a.leaves()]) + '\n')
                        self.Scrolledtext1.insert(tk.INSERT," ".join([lf[0] for lf in a.leaves()]) + '\n')

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("455x450+447+117")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(1,  1)
        top.title("Key term extract application")
        top.configure(background="#d9d9d9")

        self.TEntry1 = ttk.Entry(top)
        self.TEntry1.place(relx=0.073, rely=0.111, relheight=0.06
                , relwidth=0.651)
        self.TEntry1.configure(font="-family {Arial} -size 12")
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="ibeam")

        self.Button1 = tk.Button(top,command=self.open_file)
        self.Button1.place(relx=0.747, rely=0.111, height=27, width=87)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Open FIle''')

        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(relx=0.066, rely=0.2, relheight=0.678
                , relwidth=0.868)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="-family {Times New Roman} -size 14")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="blue")
        self.Scrolledtext1.configure(selectforeground="white")
        self.Scrolledtext1.configure(wrap="none")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.066, rely=0.044, height=21, width=84)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Times New Roman} -size 14")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Text file''')

        # self.Button2 = tk.Button(top)
        # self.Button2.place(relx=0.725, rely=0.911, height=27, width=87)
        # self.Button2.configure(activebackground="#ececec")
        # self.Button2.configure(activeforeground="#000000")
        # self.Button2.configure(background="#d9d9d9")
        # self.Button2.configure(disabledforeground="#a3a3a3")
        # self.Button2.configure(foreground="#000000")
        # self.Button2.configure(highlightbackground="#d9d9d9")
        # self.Button2.configure(highlightcolor="black")
        # self.Button2.configure(pady="0")
        # self.Button2.configure(text='''Process''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





